---
  AWSTemplateFormatVersion: '2010-09-09'
  
  Parameters:
    EKSClusterName:
      Type: String
      Default: EKS
      Description: The desired name of your AWS EKS Cluster.
    
    EKSVersion:
      Type: String
      Default: 1.19
      Description: The desired version of your AWS EKS Cluster.
    
    EKSNodeGroupName:
      Type: String
      Default: NodeGroup01
      Description: The desired name of your AWS EKS Node Group.
    
    EKSDesiredWorkerNode:
      Type: Number
      Default: 3
      Description: Number of desired Worker Node.
      MinValue: 1
      MaxValue: 4
  
    EKSWorkerNodeInstanceType:
      Type: String
      Default: t2.micro
      Description: EC2 instance type for the node instances.
  
    EKSIAMRoleName:
      Type: String
      Default: EKSClusterRole
      Description: The name of the IAM role for the EKS service to assume.
    
    EKSKeyPair:
      Type: "AWS::EC2::KeyPair::KeyName"
      Default: "my-eks-key"
      Description: The name of Key Pair to etasblish connection with Worker Node.
    
    VpcBlock:
      Type: String
      Default: 10.0.0.0/16
      Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
      AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
    PublicSubnet01Block:
      Type: String
      Default: 10.0.0.0/24
      Description: CidrBlock for public subnet 01 within the VPC.
      AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
    PublicSubnet02Block:
      Type: String
      Default: 10.0.1.0/24
      Description: CidrBlock for public subnet 02 within the VPC.
      AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
    AvailabilityZonePublicSubnet01:
      Type: CommaDelimitedList<AWS::EC2::AvailabilityZone::Name>
      Default: us-east-2a
      Description: Availability Zone for the Public Subnet 01. 

    AvailabilityZonePublicSubnet02:
      Type: CommaDelimitedList<AWS::EC2::AvailabilityZone::Name>
      Default: us-east-2b
      Description: Availability Zone for the Public Subnet 02.
    
    pDBName:
      Type: String
      Description: The name for the Database.
    
    pDBUser:
      Type: String
      Description: The name of the user who has access to the Database.
    
    pDBPass:
      Type: String
      Description: The password of the user who has access to the Database.


  Resources:
    eksVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcBlock
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-VPC'
          - Key: Project
            Value: igti-pa
  
    eksInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-InternetGateway'
          - Key: Project
            Value: igti-pa
      
    eksVPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref eksInternetGateway
        VpcId: !Ref eksVPC
    
    eksPublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref eksVPC
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-RouteTable'
          - Key: Project
            Value: igti-pa
  
    eksPublicRoute:
      DependsOn: eksVPCGatewayAttachment
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref eksPublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref eksInternetGateway
  
    eksPublicSubnet01:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Ref AvailabilityZonePublicSubnet01
        MapPublicIpOnLaunch: true
        CidrBlock:
          Ref: PublicSubnet01Block
        VpcId:
          Ref: eksVPC
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PublicSubnet01"
          - Key: Project
            Value: igti-pa
      
    eksPublicSubnet02:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Ref AvailabilityZonePublicSubnet02
        MapPublicIpOnLaunch: true
        CidrBlock:
          Ref: PublicSubnet02Block
        VpcId:
          Ref: eksVPC
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PublicSubnet02"
          - Key: Project
            Value: igti-pa
    
    eksPublicSubnet01RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref eksPublicSubnet01
        RouteTableId: !Ref eksPublicRouteTable
  
    eksPublicSubnet02RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref eksPublicSubnet02
        RouteTableId: !Ref eksPublicRouteTable
  
    eksSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Cluster communication with worker nodes
        VpcId: !Ref eksVPC
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-SecurityGroup"
          - Key: Project
            Value: igti-pa
  
    eksIAMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - eks.amazonaws.com
              Action:
              - 'sts:AssumeRole'
        RoleName: !Ref EKSIAMRoleName
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  
    eksCluster:
      Type: AWS::EKS::Cluster
      Properties:
        Name: !Ref EKSClusterName
        Version: !Ref EKSVersion
        RoleArn:
          "Fn::GetAtt": ["eksIAMRole", "Arn"]
        ResourcesVpcConfig:
          SecurityGroupIds:
            - !Ref eksSecurityGroup
          SubnetIds:
            - !Ref eksPublicSubnet01
            - !Ref eksPublicSubnet02
      DependsOn: [eksIAMRole, eksPublicSubnet01, eksPublicSubnet02, eksSecurityGroup]
  
    eksNodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ["ec2.amazonaws.com"]
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        Path: /
  
    eksNodeGroup:
      Type: AWS::EKS::Nodegroup
      Properties:
        ClusterName: !Ref EKSClusterName
        NodeRole: 
          "Fn::GetAtt": ["eksNodeInstanceRole", "Arn"]
        AmiType: AL2_x86_64
        InstanceTypes: 
          - !Ref EKSWorkerNodeInstanceType
        NodegroupName: !Ref EKSNodeGroupName
        RemoteAccess:
          Ec2SshKey: !Ref EKSKeyPair
        ScalingConfig:
          MinSize: 1
          DesiredSize: !Ref EKSDesiredWorkerNode
          MaxSize: 7
        Labels:
          Project: igti-pa
        Subnets:
          - !Ref eksPublicSubnet01
          - !Ref eksPublicSubnet02
      DependsOn: [eksCluster, eksNodeInstanceRole]

    rdsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Communication with PostgreSQL
        SecurityGroupIngress: 
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0
        Tags: 
          - Key: Name
            Value: !Sub "${AWS::StackName}-RdsSecurityGroup"
          - Key: Project
            Value: igti-pa

    rdsInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: !Ref pDBName
        MasterUsername: !Ref pDBUser
        MasterUserPassword: !Ref pDBPass
        Engine: Postgres
        DBInstanceClass: db.t2.micro
        StorageType: gp2
        PubliclyAccessible: True
        AllocatedStorage: "20"
        DBInstanceIdentifier: !Sub '${AWS::StackName}-DBInstance'
        VPCSecurityGroups:
          - !GetAtt rdsSecurityGroup.GroupId
        AvailabilityZone: !Select [1, !GetAZs ""]
  
  Outputs:
    SubnetIds:
      Description: Subnets IDs in the eksVPC
      Value: !Join [ ",", [ !Ref eksPublicSubnet01, !Ref eksPublicSubnet02 ] ]
    SecurityGroups:
      Description: Security group for the cluster control plane communication with worker nodes
      Value: !Join [ ",", [ !Ref eksSecurityGroup ] ]
    VpcId:
      Description: The eksVPC Id
      Value: !Ref eksVPC
    InstanceId:
      Description: InstanceId of the newly created RDS Instance
      Value: !Ref rdsInstance